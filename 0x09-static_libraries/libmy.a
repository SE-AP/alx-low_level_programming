!<arch>
0-isupper.c/    0           0     0     644     214       `
#include "main.h"

/**
 * _isupper - checks if a character is an uppercase letter
 * @c: char to check
 *
 * Return: 1 if uppercase, 0 otherwise
 */

int _isupper(int c)
{
	return (c >= 'A' && c <= 'Z') ? 1 : 0;
}
0-memset.c/     0           0     0     644     229       `
#include <stdlib.h>

char *_memset(char *s, char b, unsigned int n) {
	char *result = (char *)malloc(n);
	if (result == NULL) {
	return (NULL);
	}

	for (unsigned int a = 0; a < n; a++) {
	result[a] = b;
	}

	return (result);
}


0-strcat.c/     0           0     0     644     660       `
#include "main.h"
#include <stdlib.h>

/**
 * _strcat - function that concatenates two strings
 * @dest: destination string
 * @src: source string
 *
 * Return: pointer to the concatenated string
 */
char *_strcat(char *dest, char *src)
{
	int dest_len = 0;
	int src_len = 0;
	char *new_str;
	char *new_dest;

	while (dest[dest_len] != '\0')
	dest_len++;

	while (src[src_len] != '\0')
	src_len++;

	new_str = (char *)malloc((dest_len + src_len + 1) * sizeof(char));
	if (new_str == NULL)
	return (NULL);

	new_dest = new_str;
	while (*dest != '\0')
	*new_dest++ = *dest++;

	while (*src != '\0')
	*new_dest++ = *src++;
	*new_dest = '\0';
	return (new_str);
}
100-atoi.c/     0           0     0     644     536       `
#include <stddef.h>
#include <stdlib.h>

/**
 * _atoi - convert a string into an integer.
 *
 * @s: the string to use.
 *
 * Return: integer.
 */
int _atoi(char *s)
{
	int sign = 1;
	size_t i = 0;
	unsigned int res = 0;

	while (!(s[i] <= '9' && s[i] >= '0') && s[i] != '\0')
	{
	if (s[i] == '-')
		sign *= -1;
	i++;
	}
	while (s[i] <= '9' && (s[i] >= '0' && s[i] != '\0'))
	{
	res = (res * 10) + (s[i] - '0');
	i++;
	}

	res *= sign;
	return (int)res;
}

int main() {
	char str[] = "abc-123";
	int result = _atoi(str);
	return (0);
}

1-isdigit.c/    0           0     0     644     220       `
#include "main.h" 

/**
 * is_digit - checks if a character is a digit (0 through 9)
 * @c: character to be checked
 * Return: 1 if c is a digit, 0 otherwise
 */
int _isdigit(int c)
{
	return (c >= '0' && c <= '9');
}


1-memcpy.c/     0           0     0     644     560       `
#include <stdlib.h>

/**
 * _memcpy - a function that copies memory area
 * @dest: memory where is stored
 * @src: memory where is copied
 * @n: number of bytes
 *
 * Return: copied memory with n bytes changed
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
    char *result = (char *)malloc(n);
    if (result == NULL) {
        return (NULL);
    }

    for (unsigned int i = 0; i < n; i++) {
        result[i] = src[i];
    }

    for (unsigned int i = 0; i < n; i++) {
        dest[i] = result[i];
    }

    free(result);
    return (dest);
}

1-strncat.c/    0           0     0     644     344       `
#include <stddef.h>
#include <stdlib.h> 

char *_strncat(char *dest, char *src, int n) 
{
    size_t dest_len = 0;
    while (dest[dest_len] != '\0') {
        dest_len++;
    }

    size_t i = 0;
    while (i < n && src[i] != '\0') {
        dest[dest_len + i] = src[i];
        i++;
    }
    dest[dest_len + i] = '\0';

    return (dest);
}
2-strchr.c/     0           0     0     644     372       `
#include "main.h"

/**
 * _strchr - Locates a character in a string
 * @s: Input string
 * @c: Character to locate
 * Return: Pointer to the first occurrence of the character in the string,
 *         or NULL if the character is not found
 */
char *_strchr(char *s, char c)
{
	int i = 0;
		for (; s[i] >= '\0'; i++)
	{
	if (s[i] == c)
		return (&s[i]);
	}
	return (0);
}

2-strlen.c/     0           0     0     644     243       `
#include "main.h"

/**
 * _strlen - returns the length of a string
 * @s: string
 * Return: length
 */
int _strlen(char *s)
{
    int length = 0;
    
    while (*(s + length) != '\0')
    {
        length++;
    }
    
    return (length);
}

2-strncpy.c/    0           0     0     644     421       `
#include <stddef.h>

/**
 * _strncpy - copy a string
 * @dest: destination buffer
 * @src: source string
 * @n: number of characters to copy
 *
 * Return: pointer to dest
 */
char *_strncpy(char *dest, const char *src, int n)
{
    int j = 0;

    while (j < n && src[j] != '\0')
    {
        dest[j] = src[j];
        j++;
    }
    while (j < n)
    {
        dest[j] = '\0';
        j++;
    }

    return (dest);
}


3-islower.c/    0           0     0     644     210       `
#include "main.h"
/**
 * _islower - checks for lowercase character
 * @c: the character to check
 * Return: 1 if c is lowercase, 0 otherwise
 */
int _islower(int c)
{
        	return (c >= 'a' && c <= 'z');
}

3-puts.c/       0           0     0     644     217       `
#include "main.h"
void _puts(char *str)
#include<stdio.h>
/**
 * main - Entry point
 *
 * Return: Always 0 (Success)
 */
int main(void)
{
	puts("\"Programming is like building a multilingual puzzle");
	return (0);
}


3-strcmp.c/     0           0     0     644     822       `
#include <stddef.h>
#include <stdlib.h>

int _strcmp(char *s1, char *s2) {
    if (!s1 || !s2)
        return (0);

    int i = 0;
    while (s1[i] != '\0' && s2[i] != '\0') {
        if (s1[i] != s2[i])
            return (s1[i] - s2[i]);
        i++;
    }
    return (s1[i] - s2[i]);
}

char *_strcpy(char *dest, const char *src) {
    if (!dest || !src)
        return (NULL);

    char *original_dest = dest;

    while (*src != '\0') {
        *dest = *src;
        dest++;
        src++;
    }

    *dest = '\0';
    return (original_dest);
}

size_t _strlen(const char *s) {
    if (!s)
        return (0);

    size_t len = 0;
    while (s[len] != '\0')
        len++;

    return (len);
}

void *_malloc(size_t size) {
    void *ptr = malloc(size);
    return (ptr);
}

void _free(void *ptr) {
    free(ptr);
}

3-strspn.c/     0           0     0     644     402       `
#include "main.h"
/**
 * _strspn - Entry point
 * @s: input
 * @accept: input
 * Return: Always 0 (Success)
 */
unsigned int _strspn(char *s, char *accept)
{
        unsigned int n = 0;
        int r;
        while (*s)
	{
	for (r = 0; accept[r]; r++)
	{
	if (*s == accept[r])
	{
	n++;
      break;
           }  
	else if (accept[r + 1] == '\0')
	return (n);
	}
	s++;
       	}
       	return (n);
}

4-isalpha.c/    0           0     0     644     257       `
#include "main.h"
                    	
/**
 * _isalpha -for alphabetic character
 * @c: the character to be checked
 * Return: 1 if c is a letter, 0 otherwise
 */
int _isalpha(int c)
{
        	return ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'));
}


4-strpbrk.c/    0           0     0     644     485       `
#include <stdlib.h>

/**
 * _strpbrk - Finds the first occurrence of a character from `accept` in `s`
 * @s: The input string to search
 * @accept: The characters to search for
 * Return: Pointer to the first occurrence in `s`, or NULL if not found
 */
char *_strpbrk(char *s, char *accept)
{
    int k;

    while (*s)
    {
        for (k = 0; accept[k]; k++)
        {
            if (*s == accept[k])
                return (s);
        }
        s++;
    }

    return (NULL);
}


5-strstr.c/     0           0     0     644     666       `
#include "main.h"
#include <stddef.h> 

/**
 * _strstr - Find the first occurrence of a substring in a string
 * @haystack: The string to search in
 * @needle: The substring to search for
 * Return: Pointer to the first occurrence of `needle` in `haystack`,
 * or NULL if `needle` is not found
 */
char *_strstr(char *haystack, char *needle)
{
    if (!(*needle))
        return (haystack);

    while (*haystack)
    {
        char *h = haystack;
        char *n = needle;

        while (*h == *n && *n)
        {
            h++;
            n++;
        }

        if (*n == '\0')
            return (haystack);

        haystack++;
    }

    return (NULL);
}

6-abs.c/        0           0     0     644     394       `
#include <stdlib.h>

int _abs(int n);

/**
 * main - Entry point
 * Return: Always 0 (Success)
 */
int main(void)
{
    int num = -42;
    int result = _abs(num);
    
    return (0);
}

/**
 * _abs - computes the absolute value of an integer
 * @n: the int to check
 * Return: the absolute value of int
 */
int _abs(int n)
{
    if (n >= 0)
    {
        return (n);
    }
    return (-n);
}

9-strcpy.c/     0           0     0     644     639       `
#include "main.h"
#include <stdlib.h>

char *_strcpy(char *dest, char *src);

/** 
 * _strlen - Calculate the length of a string
 * @s: Input string
 * Return: Length of the string
 */
int _strlen(char *s)
{
    int len = 0;
    while (*s != '\0')
    {
        len++;
        s++;
    }
    return (len);
}

/**
 * _strcpy - Copy a string from source to destination
 * @dest: Destination string
 * @src: Source string
 * Return: Pointer to the destination string
 */
char *_strcpy(char *dest, char *src)
{
    int len = _strlen(src);
    int i;

    for (i = 0; i <= len; i++)
    {
        dest[i] = src[i];
    }

    return (dest);
}


_putchar.c/     0           0     0     644     0         `
